/**
 * Методы:
 *
 * Перемещение по узлам
 * Формирование узла
 * Инициализация вью-модели
 * Получение данных из вью-модели
 * Фиксация изменений в модели
 *
 * Два способа перемещения по узлам:
 * с полным перестроением доски
 * с локальными изменениями (применение изменений за каждый промежуточный узел)
 *
 */
var model = Backbone.Model.extend({

    defaults: function () {
        return {
            sgf: '(;FF[4]GM[1]SZ[19])'
        };
    },

    initialize: function () {
        // История изменения узлов (добавление / удаление камней / меток)
        this._nodes = [];
        // Описание текущего состояния (камни + метки)
        this._scheme = {
            marking: {},
            stones: {}
        };
    },

    // Применение промежуточных изменений
    moveBy: function () {},

    // Перерисовка доски до конкретного узла
    moveTo: function () {},

    // Парсит узел SGF
    parse: function () {},

    // Добавляем данные в буффер текущего узла
    buf: function () {},

    // Фиксация изменений (буфер), переход к следующему узлу
    fix: function () {}

    // Методы для формирования данных схемы
    // Методы для отрисовки всей схемы или локальных изменений (вьюха)
});

/**
 * Внутри три слоя: гобан, камни, метки
 *
 * Представление данных: объект с камнями и объект с метками
 * свойство содержит координаты: "10.11", значение: обозначение камня / метки
 *
 * Можно создать вью-модельку, которая будет хранить данные о доске
 * Два объекта с текущим состоянием (камни и метки), а также объект с изменениями
 *
 */
var SGF = Backbone.View.extend({
    
    tagName: 'div',

    className: 'scheme',

    // Создаем слои
    // Подписываемся на события
    initialize: function () {
        // Ссылки на вьюхи
        this._layers = {
            goban: null,
            marking: null,
            stones: null
        };
    },

    draw: function (stones, marking, goban) {},

    // Отрисовать SGF, описанную в модели (доска + model._scheme)
    render: function () {}
});